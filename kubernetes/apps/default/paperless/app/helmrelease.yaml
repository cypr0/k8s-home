---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: paperless
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      main:
        replicas: 1
        strategy: Recreate
        annotations:
          reloader.stakater.com/auto: "true"
          secret.reloader.stakater.com/reload: "paperless-secret"
        containers:
          paperless-ngx:
            image:
              repository: ghcr.io/paperless-ngx/paperless-ngx
              tag: 2.19.2@sha256:e1e0026cdacda4bb157c024a8a1a343bd16b34d8900e7f3958598b9afebd0d38
            env:
              PAPERLESS_APPS: allauth.socialaccount.providers.openid_connect
              PAPERLESS_CONSUMER_POLLING: 60
              PAPERLESS_CONSUMER_RECURSIVE: "true"
              PAPERLESS_CONSUMER_SUBDIRS_AS_TAGS: "true"
              PAPERLESS_CONSUMPTION_DIR: /consume
              PAPERLESS_DATA_DIR: /library/data
              PAPERLESS_DISABLE_REGULAR_LOGIN: "true"
              PAPERLESS_EXPORT_DIR: /library/export
              PAPERLESS_LOGOUT_REDIRECT_URL: https://id.${SECRET_DOMAIN}/application/o/paperless-ngx/end-session/
              PAPERLESS_MEDIA_ROOT: /library/media
              PAPERLESS_OCR_LANGUAGE: deu+eng+spa
              PAPERLESS_PORT: &port 80
              PAPERLESS_REDIS: redis://:${DRAGONFLY_PASSWORD}@dragonfly.database.svc.cluster.local:6379
              PAPERLESS_SOCIALACCOUNT_PROVIDERS: >
                    {
                      "openid_connect": {
                        "APPS": [
                          {
                            "provider_id": "authentik",
                            "name": "Authentik",
                            "client_id": "${PAPERLESS_OPENID_CLIENT_ID}",
                            "secret": "${PAPERLESS_OPENID_CLIENT_SECRET}",
                            "settings": {
                              "server_url": "https://id.${SECRET_DOMAIN}/application/o/paperless-ngx/.well-known/openid-configuration"
                            }
                          }
                        ],
                        "OAUTH_PKCE_ENABLED": "True",
                        "SCOPE": ["openid", "profile", "email", "groups"]
                      }
                    }
              PAPERLESS_SOCIAL_ACCOUNT_SYNC_GROUPS: "true"
              PAPERLESS_TASK_WORKERS: 2
              PAPERLESS_TIKA_ENABLED: 1
              PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://paperless-gotenberg.default.svc.cluster.local:3030
              PAPERLESS_TIKA_ENDPOINT: http://paperless-tika.default.svc.cluster.local:9998
              PAPERLESS_TIME_ZONE: ${TIMEZONE}
              PAPERLESS_TRUSTED_PROXIES: 10.96.0.0/16,10.69.0.0/16,192.168.0.0/16
              PAPERLESS_URL: https://paperless.${SECRET_DOMAIN}
              USERMAP_UID: 3000
              USERMAP_GID: 3000
            envFrom:
              - secretRef:
                  name: paperless-secret
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5
          gotenberg:
            image:
              repository: docker.io/gotenberg/gotenberg
              tag: 8.24.0
            command:
              - gotenberg
              - "--chromium-disable-javascript=true"
              - "--chromium-allow-list=file:///tmp/.*"
              - "--api-port=3030"
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
              runAsUser: 3000
              runAsGroup: 3000
              fsGroup: 3000
              runAsNonRoot: true
          tika:
            image:
              repository: apache/tika
              tag: 3.2.3.0-full
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
              runAsUser: 3000
              runAsGroup: 3000
              fsGroup: 3000
              runAsNonRoot: true
          paperless-ai:
            image:
              repository: docker.io/clusterzx/paperless-ai
              tag: 3.0.7
            env:
              PAPERLESS_AI_INITIAL_SETUP: "no"
              PAPERLESS_API_URL: "http://paperless-paperless-ngx.default.svc.cluster.local/api"
              AI_PROVIDER: "custom"
              SCAN_INTERVAL: "*/60 * * * *"
              SYSTEM_PROMPT: |
                Du bist ein hochpräziser, methodisch arbeitender Experte für Datenanlaye zu Extraktion für das Dokumentenmanagementsystem Paperless-ngx. Deine Aufgabe ist es, aus dem folgenden Dokument strukturierte Daten zu generieren. SYSTEMANWEISUNGEN Analyse: Lies den gesamten Dokumententext sorgfältig, um Kontext, Zweck und Kernaussagen zu verstehen. Regelanwendung: Wende die unten definierten Regeln Punkt für Punkt an. Halte dich an die Reihenfolge und die Logik. 1. Dokumenttyp (document_type): Klassifiziere das Dokument. Wähle exakt EINEN der folgenden Werte: -- \"Information\" -- \"Korrespondenz\" -- \"Rechnung\" -- \"Nebenkostenabrechnung\" -- \"Lohnsteuerbescheinigung\" -- \"Bescheid\" -- \"Vertrag\" -- \"Bescheinigung\" -- \"Kontoauszug\" Wenn keiner der definierten Dokumenttypen passt, weise \"Dokument\" zu. 2. Korrespondent (correspondent): Identifiziere den Absender (Firma, Behörde, Person). Verwende immer das Unternehmen, an das eine Zahlung geleistet wird oder das der primäre Vertragspartner ist. Standardisiere bekannte Korrespondenten IMMER auf eine exakte Schreibweise. Für Amazon-Dokumente, verwende IMMER \"Amazon EU S.à r.l.\", unabhängig davon, ob im Dokument \"Amazon EU SARL\" verwendet wird. Wenn der Korrespondent bisher nicht vorhanden ist, dann erzeuge eine saubere, möglichst kurze Form inkl. Firmierung (z.B. \"DKB Deutsche Kreditbank AG\", \"domus data GmbH\", \"Amtsgericht Köln\") 3. Dokumentendatum (document_date): Regel: Extrahiere das primäre Datum des Dokuments (Rechnungsdatum, Ausstellungsdatum). Wenn keines gefunden wird, verwende das JSON-Literal null. Formatiere es exakt als \"YYYY-MM-DD\". 4. Sprache (language): Bestimme die Sprache des Dokuments. Verwende ausschließlich ISO 639-1 Sprachcodes (z.B. \"de\", \"en\"). Wenn Sprache unklar, setze Literal \"null\". 5. TAGS (tags): Regel: Erstelle eine finale JSON-Liste mit 2 bis 5 nützlichen, spezifischen TAGS in deutscher Sprache (Anglizismen sind erlaubt.). Vermeide generische TAGS, wie z.B. Firmennamen und Dokumententypen. Pflicht-Tag: Füge den TAG "Steuer" aus Regel 5a. hinzu, falls einer ermittelt wurde. ABGLEICH: Normalisiere alle TAGS (z.B. \"Online-Dienst\" wird zu \"Onlinedienst\"). 5a. Steuerrelevanz-Analyse: --- Die Leistung/Ware hat einen klaren Bezug zu Informationssicherheit, Datenschutz, Rechtswissenschaften, IT (z.B. \"Webhosting\", \"Software-Abo\", \"Monitor\", \"Laptop\", \"Server\", \"Hosting\") -- Anderweitig Absetzbar: Wenn kein Bezug vorhanden, dann prüfe, ob es absetzbar ist. Trifft zu bei: -- Rechnungen von Apotheken oder Ärzten. -- Rechnungen für Telekommunikation (z.B. von \"Congstar\", \"Vodafone\", \"Netcup\"). -- Rechnungen für Bildung und Fortbildung (z.B. von \"Heise\", \"DGI Deutsche Gesellschaft für Informationssicherheit AG\") -- Rechnungen für Handwerkerleistungen oder haushaltsnahe Dienstleistungen. -- Rechnungen in Bezug zu Immoblien oder Nebenkostenabrechnungen sowie Hausverwaltung -- Keine Relevanz: In allen anderen Fällen wird kein Steuer-TAG vergeben (z.B. bei Korrespondent \"Elli\" und \"Netflix Services Germany GmbH\") 6. Titel (title): Wird als letztes generiert nach dem starren Schema: \"*Korrespondent - Dokumenttyp - Zusatz\" Der Zusatz ist eine prägnante, kontextabhängige Information: -- Bei document_type \"Rechnung\": Die Rechnungsnummer. -- Bei document_type \"Vertrag\": Die Vertrags- oder Kundennummer. -- Bei document_type \"Bescheid\": Das Aktenzeichen. -- Ansonsten eine sehr kurze Inhaltsangabe (z.B. \"Produktregistrierung\"). 7. Custom Field \"Steuerjahr\" (custom_fields): Bedingung: NUR wenn document_type gleich \"Rechnung\" oder \"Nebenkostenabrechnung\" ist: -- Füge das Custom Field \"Steuerjahr\" hinzu. -- Der Wert muss das vierstellige Jahr \"YYYY\" aus dem document_date sein (z.B. \"2025\"). -- Falls document_date nicht vorhanden ist oder ein anderer document_type als\"Rechnung\" oder \"Nebenkostenabrechnung\" ist, wird das Feld komplett aus dem JSON-Objekt weggelassen. 8. Custom Field \"Rechnungsbetrag\" (custom_fields): Bedingung: Prüfe, ob das Dokument Begriffe wie \"Rechnung\", \"Quittung\", \"Gesamtbetrag\", \"Total\", \"Zu zahlen\" oder \"Amount\" enthält. Wenn, dann: -- Füge das Custom Field \"Rechnungsbetrag\" hinzu. -- Extrahiere den finalen Gesamtbetrag (z.B. „Summe\", „Gesamtbetrag“, „Zu Zahlen\", „Ammount\", etc.) als rein numerischen Wert (z.B. \"42.99\"). -- Wird kein Betrag gefunden, füge das Feld \"Rechnungsbetrag\" nicht hinzu. Allgemeine Anweisungen & Vorgaben (Strikte Einhaltung erforderlich): Genauigkeit ist an erster Stelle: Alle extrahierten Informationen müssen ausschließlich auf dem Inhalt des bereitgestellten Dokuments basieren: rate nicht. JSON-Format: Die finale Ausgabe MUSS ein einziges, valides JSON-Objekt sein. Vollständigkeit: Alle definierten Felder (title, correspondent, tags, document_date, document_type, etc.) MÜSSEN im finalen JSON vorhanden sein. Fehlende Informationen: Wenn Informationen für ein Feld nicht gefunden werden können, verwende IMMER den JSON-Wert null (das Literal, nicht den String \"null\"). Das Feld tags muss mindestens einen Tag beinhalten. Schritt-für-Schritt-Prüfung: Überprüfe deine Analyse intern anhand dieser Anweisungen, bevor du das finale JSON erzeugst. Beispiel-Ausgabe {\"title\": \"Adobe Systems - Rechnung - 12345\", \"correspondent\": \"Adobe Systems Software Ireland Ltd\", \"tags\": [\"abonnement\", \"software\", \"steuern\"], \"document_type\": \"Rechnung\", \"document_date\": \"2025-06-07\", \"language\": \"de\", \"custom_fields\": {\"Rechnungsbetrag\": 14.27, \"Steuerjahr\": \"2025\"}}"
              PROCESS_PREDEFINED_DOCUMENTS: "yes"
              TAGS: "Neu"
              ADD_AI_PROCESSED_TAG: "yes"
              AI_PROCESSED_TAG_NAME: "KI"
              USE_PROMPT_TAGS: "no"
              PROMPT_TAGS: ""
              USE_EXISTING_DATA: "yes"
              ACTIVATE_CUSTOM_FIELDS: "no"
              CUSTOM_API_URL: "https://openrouter.ai/api/v1"
              CUSTOM_MODEL: "openai/gpt-4o-mini"
            envFrom:
              - secretRef:
                  name: paperless-secret
            resources:
              requests:
                cpu: 500m
                memory: 512Mi
              limits:
                cpu: 700m
                memory: 2Gi
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5
    service:
      paperless-ngx:
        controller: main
        ports:
          http:
            port: *port
      paperless-ai:
        controller: main
        ports:
          http:
            port: 3000
      gotenberg:
        controller: main
        ports:
          http:
            port: 3030
      tika:
        controller: main
        ports:
          http:
            port: 9998
    route:
      paperless-ngx:
        hostnames:
          - paperless.${SECRET_DOMAIN}
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - name: paperless-paperless-ngx
                port: 80
      paperless-ai:
        hostnames:
          - paperless-ai.${SECRET_DOMAIN}
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - name: paperless-paperless-ai
                port: 3000
    persistence:
      library:
        enabled: true
        existingClaim: paperless-data-pvc
        advancedMounts:
          main:
            paperless-ngx:
              - path: /library
      consume:
        enabled: true
        existingClaim: paperless-consume-pvc
        advancedMounts:
          main:
            paperless-ngx:
              - path: /consume
      gotenberg-tmp:
        enabled: true
        type: emptyDir
        advancedMounts:
          main:
            gotenberg:
              - path: /tmp
      tika-tmp:
        enabled: true
        type: emptyDir
        advancedMounts:
          main:
            tika:
              - path: /tmp
      ai-config:
        enabled: true
        existingClaim: paperless-ai-pvc
        advancedMounts:
          main:
            paperless-ai:
              - path: /app/data
      ai-tmp:
        enabled: true
        type: emptyDir
        advancedMounts:
          main:
            paperless-ai:
              - path: /tmp
      ai-logs:
        enabled: true
        type: emptyDir
        advancedMounts:
          main:
            paperless-ai:
              - path: /app/logs
