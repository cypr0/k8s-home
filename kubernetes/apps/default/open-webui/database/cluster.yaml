---
# yaml-language-server: $schema=https://datreeio.github.io/CRDs-catalog/postgresql.cnpg.io/cluster_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: cnpg-open-webui
spec:
  description: Postgresql cluster for Open WebUI
  # renovate: datasource=docker depName=ghcr.io/cloudnative-pg/postgresql
  imageName: ghcr.io/cloudnative-pg/postgresql:17.5
  instances: 1
  storage:
    size: 10Gi
    storageClass: longhorn-postgres
  postgresql:
    parameters:
      max_connections: "200"
      shared_buffers: 2GB
      effective_cache_size: 6GB
      maintenance_work_mem: 512MB
      checkpoint_completion_target: "0.9"
      wal_buffers: 16MB
      default_statistics_target: "100"
      random_page_cost: "1.1"
      effective_io_concurrency: "200"
      work_mem: 2621kB
      huge_pages: off
      min_wal_size: 1GB
      max_wal_size: 4GB
      max_worker_processes: "4"
      max_parallel_workers_per_gather: "2"
      max_parallel_workers: "4"
      max_parallel_maintenance_workers: "2"
  # Initial bootstrap for first install
  bootstrap:
   initdb:
      database: openwebuidbapp
      owner: openwebuiusr
      secret:
        name: open-webui-db-secret
  primaryUpdateStrategy: unsupervised
  monitoring:
    enablePodMonitor: true
  # Bootstrap to recover from an existing backup
  # Note: previousCluster needs to be set to the name of the previous cluster when recovering from an existing cnpg cluster.
  # bootstrap:
  #   recovery:
  #     source: &previousCluster paperless-postgres17-v1
  backup:
    retentionPolicy: 8d
    barmanObjectStore: &barmanObjectStore
      data:
        compression: gzip
      wal:
        compression: zstd
        maxParallel: 2
      destinationPath: s3://k8s-postgres/open-webui/
      endpointURL: ${SECRET_S3_URL}
      serverName: open-webui-postgres17-v1
      s3Credentials:
        accessKeyId:
          name: open-webui-db-secret
          key: ACCESS_KEY_ID
        secretAccessKey:
          name: open-webui-db-secret
          key: SECRET_ACCESS_KEY
 # Note: externalClusters is needed when recovering from an existing cnpg cluster
 # externalClusters:
 #   - name: *previousCluster
 #     barmanObjectStore:
 #       <<: *barmanObjectStore
 #       serverName: *previousCluster
